{"version":3,"sources":["components/SignCard/index.js","components/Wrapper/index.js","components/Title/index.js","components/Board/index.js","App.js","serviceWorker.js","index.js"],"names":["SignCard","props","className","aria-label","onClick","handleGuess","id","src","image","alt","sign","Wrapper","children","Title","message","score","topScore","Board","App","state","signs","shuffleSigns","array","i","length","j","Math","floor","random","temp","newSign","picked","setState","forEach","element","newScore","this","map","key","wiki_svg","unicode","unicode_symbol","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"stJAoBeA,MAjBf,SAAkBC,GAChB,OACE,yBACEC,UAAU,OACVC,aAAY,cACZC,QAAS,kBAAMH,EAAMI,YAAYJ,EAAMK,MAEvC,yBAAKC,IAAKN,EAAMO,MAAON,UAAU,WAAWO,IAAKR,EAAMS,S,MCH9CC,MAJf,SAAiBV,GACf,OAAO,yBAAKC,UAAU,WAAWD,EAAMW,W,MCuB1BC,MAxBf,YAA4C,IAA5BC,EAA2B,EAA3BA,QAASC,EAAkB,EAAlBA,MAAOC,EAAW,EAAXA,SAC9B,OACE,yBAAKd,UAAU,YACb,yBAAKA,UAAU,uCACb,yBAAKA,UAAU,+CACb,yBAAKA,UAAU,mBAEb,+CAGF,yBAAKA,UAAU,qBACb,4BAAKY,IAEP,yBAAKZ,UAAU,mBACb,oCACO,0BAAMA,UAAU,aAAhB,IAA8Ba,GADrC,KACqD,IACnD,0BAAMb,UAAU,aAAac,GAF/B,e,MCNGC,MARf,SAAehB,GACb,OACE,6BAASC,UAAU,yBACjB,yBAAKA,UAAU,gBAAgBD,EAAMW,Y,OC2F5BM,E,2MAvFbC,MAAQ,CACNC,QACAL,MAAO,EACPC,SAAU,EACVF,QAAS,4B,EAKXO,aAAe,SAAAC,GAEb,IADA,IAAIC,EAAID,EAAME,OAAS,EAChBD,EAAI,EAAGA,IAAK,CACjB,IAAME,EAAIC,KAAKC,MAAMD,KAAKE,UAAYL,EAAI,IACpCM,EAAOP,EAAMC,GACnBD,EAAMC,GAAKD,EAAMG,GACjBH,EAAMG,GAAKI,EAEb,OAAOP,G,EAITjB,YAAc,SAAAC,GACZ,IAAMwB,EAAU,EAAKX,MAAMC,MAAMd,EAAK,GAEtC,OAAQwB,EAAQC,QACd,KAAK,EAEH,EAAKC,SAAS,CACZjB,MAAO,EACPD,QAAS,6CAIXM,EAAMa,SAAQ,SAAAC,GACZA,EAAQH,QAAS,KAEnB,EAAKC,SAAS,CAAEZ,UAChB,MAEF,KAAK,EACH,EAAKY,SAAS,CAAElB,QAAS,eACzBgB,EAAQC,QAAS,EAEjB,IAAII,EAAW,EAAKhB,MAAMJ,MAAQ,EAE9BoB,EAAW,EAAKhB,MAAMH,UACxB,EAAKgB,SAAS,CAAEhB,SAAUmB,IAE5B,EAAKH,SAAS,CAAEjB,MAAOoB,IAQ3B,EAAKH,SAAS,CAAEZ,W,wEAIR,IAAD,OACP,OACE,kBAAC,EAAD,KACE,kBAAC,EAAD,CACEN,QAASsB,KAAKjB,MAAML,QACpBC,MAAOqB,KAAKjB,MAAMJ,MAClBC,SAAUoB,KAAKjB,MAAMH,WAEvB,kBAAC,EAAD,CAAOd,UAAU,aACdkC,KAAKf,aACJe,KAAKjB,MAAMC,MAAMiB,KAAI,SAAA3B,GAAI,OACvB,kBAAC,EAAD,CACEL,YAAa,EAAKA,YAClBC,GAAII,EAAKJ,GACTgC,IAAK5B,EAAKJ,GACVI,KAAMA,EAAKA,KACXF,MAAOE,EAAK6B,SACZC,QAAS9B,EAAK+B,eACdV,OAAQrB,EAAKqB,mB,GA/EXW,aCGEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.894bd6cf.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./style.css\";\n\nfunction SignCard(props) {\n  return (\n    <div\n      className=\"card\"\n      aria-label= \"Zodiac Sign\"\n      onClick={() => props.handleGuess(props.id)}\n    >\n      <img src={props.image} className=\"card-img\" alt={props.sign} />\n      {/* <div className=\"card-image-overlay\"> */}\n        {/* <h6 className=\"card-title\">{props.sign}</h6> */}\n        {/* <p className=\"card-text\">{props.picked.toString()}</p> */}\n        {/* <p>{props.id}</p> */}\n      {/* </div> */}\n    </div>\n  );\n}\n\nexport default SignCard;\n","import React from \"react\";\nimport \"./style.css\";\n\nfunction Wrapper(props) {\n  return <div className=\"wrapper\">{props.children}</div>;\n}\n\nexport default Wrapper;\n","import React from \"react\";\nimport \"./style.css\";\n\nfunction Title({message, score, topScore}) {\n  return (\n    <div className=\"titleNav\">\n      <nav className=\"navbar sticky-top navbar-expand-lg \">\n        <div className=\"row d-flex flex-row justify-content-between\">\n          <div className=\"col-5 brand-col\">\n            {/* <a className=\"navbar-brand\" href=\"/\"> */}\n            <h1>React Remember</h1>\n            {/* </a> */}\n          </div>\n          <div className=\"col-4 message-col\">\n            <h2>{message}</h2>\n          </div>\n          <div className=\"col-3 score-col\">\n            <h3>\n              Score<span className=\"scorespan\"> {score}</span> |{\" \"}\n              <span className=\"scorespan\">{topScore}</span> High </h3>\n          </div>\n        </div>\n      </nav>\n    </div>\n  );\n}\n\nexport default Title;\n","import React from \"react\";\nimport \"./style.css\";\n\nfunction Board(props) {\n  return (\n    <section className=\"maincontent container\">\n      <div className=\"card-columns\">{props.children}</div>\n    </section>\n  );\n}\n\nexport default Board;\n","// import dependencies\n\nimport React, { Component } from \"react\";\nimport SignCard from \"./components/SignCard\";\nimport Wrapper from \"./components/Wrapper\";\nimport Title from \"./components/Title\";\nimport Board from \"./components/Board\";\nimport signs from \"./signs.json\";\n\nclass App extends Component {\n  state = {\n    signs,\n    score: 0,\n    topScore: 0,\n    message: \"Welcome! Click to start!\"\n  };\n\n  // * This method, which took a lot of searching and finagling, is apparently called the \"Durstenfeld shuffle algorithm\" for shuffling an array, it was confirmed as 'how to do it' by Dan before class\n\n  shuffleSigns = array => {\n    let i = array.length - 1;\n    for (; i > 0; i--) {\n      const j = Math.floor(Math.random() * (i + 1));\n      const temp = array[i];\n      array[i] = array[j];\n      array[j] = temp;\n    }\n    return array;\n  };\n\n  // * Here is where we handle guessee. It uses a switch system based on the \"picked\" boolean of the record chosen\n  handleGuess = id => {\n    const newSign = this.state.signs[id - 1];\n\n    switch (newSign.picked) {\n      case true:\n        // * User has lost, reset the score and let them know about it\n        this.setState({\n          score: 0,\n          message: \"Bad Pick! Game Over. Click to play again\"\n        });\n\n        // * Here we reset all the cards so that the \"picked\" in thier records are set back to \"False\"\n        signs.forEach(element => {\n          element.picked = false;\n        });\n        this.setState({ signs });\n        break;\n\n      case false:\n        this.setState({ message: \"Good Pick!\" });\n        newSign.picked = true;\n\n        let newScore = this.state.score + 1;\n        // increase Topscore if need be\n        if (newScore > this.state.topScore) {\n          this.setState({ topScore: newScore });\n        }\n        this.setState({ score: newScore });\n        break;\n\n      default:\n        break;\n    }\n\n    // * After all the above set the state of signs\n    this.setState({ signs });\n  };\n\n  // * Render the home page\n  render() {\n    return (\n      <Wrapper>\n        <Title\n          message={this.state.message}\n          score={this.state.score}\n          topScore={this.state.topScore}\n        ></Title>\n        <Board className=\"container\">\n          {this.shuffleSigns(\n            this.state.signs.map(sign => (\n              <SignCard\n                handleGuess={this.handleGuess}\n                id={sign.id}\n                key={sign.id}\n                sign={sign.sign}\n                image={sign.wiki_svg}\n                unicode={sign.unicode_symbol}\n                picked={sign.picked}\n              />\n            ))\n          )}\n        </Board>\n      </Wrapper>\n    );\n  }\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}